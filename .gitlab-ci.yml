# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# Configure pipeline workflow / execution accordingly:
# - Tag pipelines always.
# - Merge request pipelines when a merge request is open for the branch.
# - Branch pipelines when a merge request is not open for the branch.
# https://docs.gitlab.com/ee/ci/yaml/workflow.html#
# switch-between-branch-pipelines-and-merge-request-pipelines
---
workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

variables:
  PIP_INDEX_URL: "https://pypi.rsint.net/api/pypi/rs_pypi_virtual/simple"
  # GIT_SUBMODULE_STRATEGY: normal
  # GIT_SUBMODULE_DEPTH: 1
  # Required CPU's for execution in Kubernetes cluster
  KUBERNETES_CPU_LIMIT: 2
  CICD_BUILD_ARCH: x86_64
  CICD_USER: $SERVICE_USER
  CICD_PASSWORD: $SERVICE_USER_API_KEY

default:
<<<<<<< HEAD
  image: saas-linux-small-amd64
  tags: [linux]
  before_script: |
    export PATH="$HOME/.local/bin:$PATH"
    pip install -U -r requirements.txt
=======
  image: docker.rsint.net/rs_common/rs-ubuntu:22.04-buildessential-2023-07-02
  tags: [linux-container]
  before_script:
    - echo -e "\e[0Ksection_start:`date +%s`:my_setup_linux[collapsed=true]\r\e[0KHeader of the setup linux collapsible section"
    - export PATH="$HOME/.local/bin:$PATH"
    - sudo ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime
    - sudo apt update
    - sudo apt install --assume-yes clang-tidy python3-pip libboost-filesystem-dev
    - python3 -m pip install -U -r requirements.txt
    - echo -e "\e[0Ksection_end:`date +%s`:my_setup_linux\r\e[0K"
    # - git config --global url.git@code.rsint.net:mirror/github.com/.insteadOf https://github.com/
    - git config --global user.name "Claus Klein"
    - git config --global user.email "claus.klein@rohde-schwarz.com"
    - git config --global -l
    - git clone https://github.com/aminya/project_options.git
>>>>>>> 2d8f8eb (update git config settings for gitlab CI)

.standard-rules:       # Make a hidden job to hold the common rules
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  extends:
    - .standard-rules  # Reuse the configuration in `.standard-rules` here
  script:
    - echo "Build default workflow ..."
    - cmake --workflow --preset default --fresh
    - echo "Build workflow complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  extends:
    - .standard-rules  # Reuse the configuration in `.standard-rules` here
  script:
    - echo "Running unit tests... This will take about a view seconds."
    - cmake --preset default --fresh
    - cmake --build --preset default --target test
    - gcovr .

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  extends:
    - .standard-rules  # Reuse the configuration in `.standard-rules` here
  script:
    - echo "Linting code... This will take about 10 seconds."
    - run-clang-tidy -p build
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application NOT yet deployed!"
